/** Declaration file generated by dts-gen */

export = leaguejs;

declare class leaguejs {
    constructor(...args: any[]);

    disableCaching(...args: any[]): void;

    enableCaching(...args: any[]): void;

    flushCache(...args: any[]): void;

    getConfig(...args: any[]): void;

    getRateLimits(...args: any[]): void;

    setCache(...args: any[]): void;

    setRateLimit(...args: any[]): void;

    updateRateLimiter(...args: any[]): void;

    static GAME_CONSTANTS: {
        gameMatchModes: {
            ARAM: string;
            ARSR: string;
            ASCENSION: string;
            ASSASSINATE: string;
            CLASSIC: string;
            DARKSTAR: string;
            FIRSTBLOOD: string;
            KINGPORO: string;
            ODIN: string;
            ONEFORALL: string;
            SIEGE: string;
            STARGUARDIAN: string;
            TUTORIAL: string;
        };
        gameMatchTypes: {
            CUSTOM_GAME: string;
            MATCHED_GAME: string;
            TUTORIAL_GAME: string;
        };
        gameModes: {
            ARAM: string;
            ARSR: string;
            ASCENSION: string;
            ASSASSINATE: string;
            CLASSIC: string;
            DARKSTAR: string;
            FIRSTBLOOD: string;
            KINGPORO: string;
            ODIN: string;
            ONEFORALL: string;
            SIEGE: string;
            STARGUARDIAN: string;
            TUTORIAL: string;
        };
        gameTypes: {
            CUSTOM_GAME: string;
            MATCHED_GAME: string;
            TUTORIAL_GAME: string;
        };
        mapNames: {
            "1": {
                name: string;
                notes: string;
            };
            "10": {
                name: string;
                notes: string;
            };
            "11": {
                name: string;
                notes: string;
            };
            "12": {
                name: string;
                notes: string;
            };
            "14": {
                name: string;
                notes: string;
            };
            "16": {
                name: string;
                notes: string;
            };
            "18": {
                name: string;
                notes: string;
            };
            "2": {
                name: string;
                notes: string;
            };
            "3": {
                name: string;
                notes: string;
            };
            "4": {
                name: string;
                notes: string;
            };
            "8": {
                name: string;
                notes: string;
            };
        };
        matchMakingQueues: {
            "3v3_BLIND": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "3v3_BOT_BEGINNER": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "3v3_BOT_INTERMEDIATE": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "3v3_BOT_INTRO": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "3v3_RANKED_FLEX": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "5v5_ARAM": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "5v5_BOT_BEGINNER": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "5v5_BOT_INTERMEDIATE": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "5v5_BOT_INTRO": {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ARAM_5x5: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ARSR_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ARURF_5X5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ASCENSION_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ASSASSINATE_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            BILGEWATER_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            BILGEWATER_ARAM_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "BOT_5x5*": {
                deprecation: {
                    deprecated: boolean;
                    replacement: number[];
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            BOT_5x5_BEGINNER: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            BOT_5x5_INTERMEDIATE: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            BOT_5x5_INTRO: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            BOT_ODIN_5x5: {
                deprecation: {
                    deprecated: boolean;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            BOT_TT_3x3: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            BOT_URF_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            COUNTER_PICK: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            CUSTOM: {
                gameQueueConfigId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            DARKSTAR_3x3: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            DEFINITELY_NOT_DOMINION_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            FIRSTBLOOD_1x1: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            FIRSTBLOOD_2x2: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            GROUP_FINDER_5x5: {
                deprecation: {
                    deprecated: boolean;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            HEXAKILL: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            INVASION_NORMAL: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            INVASION_ONSLAUGHT: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            KING_PORO_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            NEMESIS: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            NEXUS_SIEGE: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            NIGHTMARE_BOT_5x5_RANK1: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            NIGHTMARE_BOT_5x5_RANK2: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            NIGHTMARE_BOT_5x5_RANK5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            NORMAL_3x3: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            NORMAL_5x5_BLIND: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            NORMAL_5x5_DRAFT: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ODIN_5x5_BLIND: {
                deprecation: {
                    deprecated: boolean;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ODIN_5x5_DRAFT: {
                deprecation: {
                    deprecated: boolean;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ONEFORALL_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            ONEFORALL_MIRRORMODE_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            RANKED_FLEX_SR: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            RANKED_FLEX_TT: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "RANKED_PREMADE_3x3*": {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "RANKED_PREMADE_5x5*": {
                deprecation: {
                    deprecated: boolean;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            RANKED_SOLO_5x5: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "RANKED_TEAM_3x3*": {
                deprecation: {
                    deprecated: boolean;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            RANKED_TEAM_5x5: {
                deprecation: {
                    deprecated: boolean;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            SIEGE: {
                deprecation: {
                    deprecated: boolean;
                    replacement: number;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            SR_6x6: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            TB_BLIND_SUMMONERS_RIFT_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            "TEAM_BUILDER_DRAFT_RANKED_5x5*": {
                deprecation: {
                    deprecated: boolean;
                    sincePatch: string;
                };
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            TEAM_BUILDER_DRAFT_UNRANKED_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            TEAM_BUILDER_RANKED_SOLO: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
            URF_5x5: {
                gameQueueConfigId: number;
                mapId: number;
                name: string;
                queue: number;
                queueId: number;
                queueType: number;
            };
        };
        playerStatSummaryTypes: {
            AramUnranked5x5: string;
            Arsr: string;
            Ascension: string;
            Bilgewater: string;
            CAP5x5: string;
            CoopVsAI: string;
            CoopVsAI3x3: string;
            CounterPick: string;
            Darkstar: string;
            FirstBlood1x1: string;
            FirstBlood2x2: string;
            Hexakill: string;
            KingPoro: string;
            NightmareBot: string;
            OdinUnranked: string;
            OneForAll5x5: string;
            RankedFlexSR: string;
            RankedFlexTT: string;
            RankedSolo5x5: string;
            RankedTeam3x3: string;
            RankedTeam5x5: string;
            Siege: string;
            SummonersRift6x6: string;
            URF: string;
            URFBots: string;
            Unranked: string;
            Unranked3x3: string;
        };
        seasons: {
            PRESEASON2014: number;
            PRESEASON2015: number;
            PRESEASON2016: number;
            PRESEASON2017: number;
            PRESEASON3: number;
            SEASON2014: number;
            SEASON2015: number;
            SEASON2016: number;
            SEASON2017: number;
            SEASON3: number;
        };
        subTypes: {
            ARAM_UNRANKED_5x5: string;
            ASCENSION: string;
            BILGEWATER: string;
            BOT: string;
            BOT_3x3: string;
            CAP_5x5: string;
            COUNTER_PICK: string;
            DARKSTAR: string;
            FIRSTBLOOD_1x1: string;
            FIRSTBLOOD_2x2: string;
            HEXAKILL: string;
            KING_PORO: string;
            NIGHTMARE_BOT: string;
            NONE: string;
            NORMAL: string;
            NORMAL_3x3: string;
            ODIN_UNRANKED: string;
            ONEFORALL_5x5: string;
            RANKED_FLEX_SR: string;
            RANKED_FLEX_TT: string;
            RANKED_SOLO_5x5: string;
            RANKED_TEAM_3x3: string;
            RANKED_TEAM_5x5: string;
            SIEGE: string;
            SR_6x6: string;
            STARGUARDIAN: string;
            URF: string;
            URF_BOT: string;
        };
        updatedAt: string;
    };

}

declare namespace leaguejs {
    class Champion {
        constructor(...args: any[]);

        gettingById(...args: any[]): void;

        gettingList(...args: any[]): void;

    }

    class ChampionMastery {
        constructor(...args: any[]);

        gettingBySummoner(...args: any[]): void;

        gettingBySummonerForChampion(...args: any[]): void;

        gettingScoresBySummoner(...args: any[]): void;

    }

    class League {
        constructor(...args: any[]);

        gettingChallengerLeague(...args: any[]): void;

        gettingLeagueById(...args: any[]): void;

        gettingLeagueForSummonerId(...args: any[]): void;

        gettingMasterLeague(...args: any[]): void;

        gettingPositionsForSummonerId(...args: any[]): void;

    }

    class LolStatus {
        constructor(...args: any[]);

        gettingShardData(...args: any[]): void;

    }

    class Masteries {
        constructor(...args: any[]);

        gettingBySummoner(...args: any[]): void;

    }

    class Match {
        constructor(...args: any[]);

        gettingById(...args: any[]): void;

        gettingByIdForTournament(...args: any[]): void;

        gettingIdsByTournament(...args: any[]): void;

        gettingListByAccount(...args: any[]): void;

        gettingListByAccountWithoutPagination(...args: any[]): void;

        gettingRecentListByAccount(...args: any[]): void;

        gettingTimelineById(...args: any[]): void;

    }

    class Runes {
        constructor(...args: any[]);

        gettingBySummoner(...args: any[]): void;

    }

    class Spectator {
        constructor(...args: any[]);

        gettingActiveGame(...args: any[]): void;

        gettingFeaturedGames(...args: any[]): void;

    }

    class StaticData {
        constructor(...args: any[]);

        gettingChampionById(...args: any[]): void;

        gettingChampions(...args: any[]): void;

        gettingItemById(...args: any[]): void;

        gettingItems(...args: any[]): void;

        gettingLanguageStrings(...args: any[]): void;

        gettingLanguages(...args: any[]): void;

        gettingMaps(...args: any[]): void;

        gettingMasteries(...args: any[]): void;

        gettingMasteryById(...args: any[]): void;

        gettingProfileIcons(...args: any[]): void;

        gettingRealms(...args: any[]): void;

        gettingRunes(...args: any[]): void;

        gettingRunesById(...args: any[]): void;

        gettingSummonerSpells(...args: any[]): void;

        gettingSummonerSpellsById(...args: any[]): void;

        gettingVersions(...args: any[]): void;

    }

    class Summoner {
        constructor(...args: any[]);

        gettingByAccount(...args: any[]): void;

        gettingById(...args: any[]): void;

        gettingByName(...args: any[]): void;

    }

    class ThirdPartyCode {
        constructor(...args: any[]);

        gettingBySummoner(...args: any[]): void;

        verifying(...args: any[]): void;

    }

    namespace Champion {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingById(...args: any[]): void;

            function gettingList(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace ChampionMastery {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingBySummoner(...args: any[]): void;

            function gettingBySummonerForChampion(...args: any[]): void;

            function gettingScoresBySummoner(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace League {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingChallengerLeague(...args: any[]): void;

            function gettingLeagueById(...args: any[]): void;

            function gettingLeagueForSummonerId(...args: any[]): void;

            function gettingMasterLeague(...args: any[]): void;

            function gettingPositionsForSummonerId(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace LolStatus {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingShardData(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace Masteries {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingBySummoner(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace Match {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingById(...args: any[]): void;

            function gettingByIdForTournament(...args: any[]): void;

            function gettingIdsByTournament(...args: any[]): void;

            function gettingListByAccount(...args: any[]): void;

            function gettingListByAccountWithoutPagination(...args: any[]): void;

            function gettingRecentListByAccount(...args: any[]): void;

            function gettingTimelineById(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace Runes {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingBySummoner(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace Spectator {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingActiveGame(...args: any[]): void;

            function gettingFeaturedGames(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace StaticData {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingChampionById(...args: any[]): void;

            function gettingChampions(...args: any[]): void;

            function gettingItemById(...args: any[]): void;

            function gettingItems(...args: any[]): void;

            function gettingLanguageStrings(...args: any[]): void;

            function gettingLanguages(...args: any[]): void;

            function gettingMaps(...args: any[]): void;

            function gettingMasteries(...args: any[]): void;

            function gettingMasteryById(...args: any[]): void;

            function gettingProfileIcons(...args: any[]): void;

            function gettingRealms(...args: any[]): void;

            function gettingRunes(...args: any[]): void;

            function gettingRunesById(...args: any[]): void;

            function gettingSummonerSpells(...args: any[]): void;

            function gettingSummonerSpellsById(...args: any[]): void;

            function gettingVersions(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace Summoner {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingByAccount(...args: any[]): void;

            function gettingById(...args: any[]): void;

            function gettingByName(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

        }

    }

    namespace ThirdPartyCode {
        namespace prototype {
            function disableCaching(...args: any[]): void;

            function enableCaching(...args: any[]): void;

            function executingRequest(...args: any[]): void;

            function flushCache(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function gettingBySummoner(...args: any[]): void;

            function isDebugging(...args: any[]): void;

            function setCache(...args: any[]): void;

            function verifying(...args: any[]): void;

        }

    }

    namespace prototype {
        function disableCaching(...args: any[]): void;

        function enableCaching(...args: any[]): void;

        function flushCache(...args: any[]): void;

        function getConfig(...args: any[]): void;

        function getRateLimits(...args: any[]): void;

        function setCache(...args: any[]): void;

        function setRateLimit(...args: any[]): void;

        function updateRateLimiter(...args: any[]): void;

    }

    namespace util {
        function ChampionUtil(...args: any[]): any;

        function EndpointUtil(...args: any[]): any;

        function ErrorUtil(...args: any[]): void;

        function GameConstantsUtil(...args: any[]): any;

        function MasteryUtil(...args: any[]): any;

        function MatchUtil(...args: any[]): any;

        function ParameterUtil(...args: any[]): any;

        function RegionAndPlatformUtil(...args: any[]): any;

        function SummonerUtil(...args: any[]): any;

        namespace ChampionUtil {
            const prototype: {
            };

            function getChampionKeyFromName(...args: any[]): void;

        }

        namespace EndpointUtil {
            const prototype: {
            };

            function buildQueryStringFromOptions(...args: any[]): void;

            function getEndpointNames(...args: any[]): void;

        }

        namespace ErrorUtil {
            const prototype: {
            };

            function throwIfInvalidPlatformId(...args: any[]): void;

            function throwIfIsArray(...args: any[]): void;

            function throwIfNameIsInvalid(...args: any[]): void;

            function throwIfNotBoolean(...args: any[]): void;

            function throwIfNotNumerical(...args: any[]): void;

            function throwIfNotObject(...args: any[]): void;

            function throwIfNotRateLimiter(...args: any[]): void;

            function throwIfNotString(...args: any[]): void;

            function throwIfRankedQueueConfigIdInvalid(...args: any[]): void;

        }

        namespace GameConstantsUtil {
            const GAME_CONSTANTS: {
                gameMatchModes: {
                    ARAM: string;
                    ARSR: string;
                    ASCENSION: string;
                    ASSASSINATE: string;
                    CLASSIC: string;
                    DARKSTAR: string;
                    FIRSTBLOOD: string;
                    KINGPORO: string;
                    ODIN: string;
                    ONEFORALL: string;
                    SIEGE: string;
                    STARGUARDIAN: string;
                    TUTORIAL: string;
                };
                gameMatchTypes: {
                    CUSTOM_GAME: string;
                    MATCHED_GAME: string;
                    TUTORIAL_GAME: string;
                };
                gameModes: {
                    ARAM: string;
                    ARSR: string;
                    ASCENSION: string;
                    ASSASSINATE: string;
                    CLASSIC: string;
                    DARKSTAR: string;
                    FIRSTBLOOD: string;
                    KINGPORO: string;
                    ODIN: string;
                    ONEFORALL: string;
                    SIEGE: string;
                    STARGUARDIAN: string;
                    TUTORIAL: string;
                };
                gameTypes: {
                    CUSTOM_GAME: string;
                    MATCHED_GAME: string;
                    TUTORIAL_GAME: string;
                };
                mapNames: {
                    "1": {
                        name: string;
                        notes: string;
                    };
                    "10": {
                        name: string;
                        notes: string;
                    };
                    "11": {
                        name: string;
                        notes: string;
                    };
                    "12": {
                        name: string;
                        notes: string;
                    };
                    "14": {
                        name: string;
                        notes: string;
                    };
                    "16": {
                        name: string;
                        notes: string;
                    };
                    "18": {
                        name: string;
                        notes: string;
                    };
                    "2": {
                        name: string;
                        notes: string;
                    };
                    "3": {
                        name: string;
                        notes: string;
                    };
                    "4": {
                        name: string;
                        notes: string;
                    };
                    "8": {
                        name: string;
                        notes: string;
                    };
                };
                matchMakingQueues: {
                    "3v3_BLIND": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "3v3_BOT_BEGINNER": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "3v3_BOT_INTERMEDIATE": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "3v3_BOT_INTRO": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "3v3_RANKED_FLEX": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "5v5_ARAM": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "5v5_BOT_BEGINNER": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "5v5_BOT_INTERMEDIATE": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "5v5_BOT_INTRO": {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ARAM_5x5: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ARSR_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ARURF_5X5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ASCENSION_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ASSASSINATE_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    BILGEWATER_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    BILGEWATER_ARAM_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "BOT_5x5*": {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number[];
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    BOT_5x5_BEGINNER: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    BOT_5x5_INTERMEDIATE: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    BOT_5x5_INTRO: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    BOT_ODIN_5x5: {
                        deprecation: {
                            deprecated: boolean;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    BOT_TT_3x3: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    BOT_URF_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    COUNTER_PICK: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    CUSTOM: {
                        gameQueueConfigId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    DARKSTAR_3x3: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    DEFINITELY_NOT_DOMINION_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    FIRSTBLOOD_1x1: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    FIRSTBLOOD_2x2: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    GROUP_FINDER_5x5: {
                        deprecation: {
                            deprecated: boolean;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    HEXAKILL: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    INVASION_NORMAL: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    INVASION_ONSLAUGHT: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    KING_PORO_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    NEMESIS: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    NEXUS_SIEGE: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    NIGHTMARE_BOT_5x5_RANK1: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    NIGHTMARE_BOT_5x5_RANK2: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    NIGHTMARE_BOT_5x5_RANK5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    NORMAL_3x3: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    NORMAL_5x5_BLIND: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    NORMAL_5x5_DRAFT: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ODIN_5x5_BLIND: {
                        deprecation: {
                            deprecated: boolean;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ODIN_5x5_DRAFT: {
                        deprecation: {
                            deprecated: boolean;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ONEFORALL_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    ONEFORALL_MIRRORMODE_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    RANKED_FLEX_SR: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    RANKED_FLEX_TT: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "RANKED_PREMADE_3x3*": {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "RANKED_PREMADE_5x5*": {
                        deprecation: {
                            deprecated: boolean;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    RANKED_SOLO_5x5: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "RANKED_TEAM_3x3*": {
                        deprecation: {
                            deprecated: boolean;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    RANKED_TEAM_5x5: {
                        deprecation: {
                            deprecated: boolean;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    SIEGE: {
                        deprecation: {
                            deprecated: boolean;
                            replacement: number;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    SR_6x6: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    TB_BLIND_SUMMONERS_RIFT_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    "TEAM_BUILDER_DRAFT_RANKED_5x5*": {
                        deprecation: {
                            deprecated: boolean;
                            sincePatch: string;
                        };
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    TEAM_BUILDER_DRAFT_UNRANKED_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    TEAM_BUILDER_RANKED_SOLO: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                    URF_5x5: {
                        gameQueueConfigId: number;
                        mapId: number;
                        name: string;
                        queue: number;
                        queueId: number;
                        queueType: number;
                    };
                };
                playerStatSummaryTypes: {
                    AramUnranked5x5: string;
                    Arsr: string;
                    Ascension: string;
                    Bilgewater: string;
                    CAP5x5: string;
                    CoopVsAI: string;
                    CoopVsAI3x3: string;
                    CounterPick: string;
                    Darkstar: string;
                    FirstBlood1x1: string;
                    FirstBlood2x2: string;
                    Hexakill: string;
                    KingPoro: string;
                    NightmareBot: string;
                    OdinUnranked: string;
                    OneForAll5x5: string;
                    RankedFlexSR: string;
                    RankedFlexTT: string;
                    RankedSolo5x5: string;
                    RankedTeam3x3: string;
                    RankedTeam5x5: string;
                    Siege: string;
                    SummonersRift6x6: string;
                    URF: string;
                    URFBots: string;
                    Unranked: string;
                    Unranked3x3: string;
                };
                seasons: {
                    PRESEASON2014: number;
                    PRESEASON2015: number;
                    PRESEASON2016: number;
                    PRESEASON2017: number;
                    PRESEASON3: number;
                    SEASON2014: number;
                    SEASON2015: number;
                    SEASON2016: number;
                    SEASON2017: number;
                    SEASON3: number;
                };
                subTypes: {
                    ARAM_UNRANKED_5x5: string;
                    ASCENSION: string;
                    BILGEWATER: string;
                    BOT: string;
                    BOT_3x3: string;
                    CAP_5x5: string;
                    COUNTER_PICK: string;
                    DARKSTAR: string;
                    FIRSTBLOOD_1x1: string;
                    FIRSTBLOOD_2x2: string;
                    HEXAKILL: string;
                    KING_PORO: string;
                    NIGHTMARE_BOT: string;
                    NONE: string;
                    NORMAL: string;
                    NORMAL_3x3: string;
                    ODIN_UNRANKED: string;
                    ONEFORALL_5x5: string;
                    RANKED_FLEX_SR: string;
                    RANKED_FLEX_TT: string;
                    RANKED_SOLO_5x5: string;
                    RANKED_TEAM_3x3: string;
                    RANKED_TEAM_5x5: string;
                    SIEGE: string;
                    SR_6x6: string;
                    STARGUARDIAN: string;
                    URF: string;
                    URF_BOT: string;
                };
                updatedAt: string;
            };

            const prototype: {
            };

            function mostRecentSeasonIds(...args: any[]): void;

            function queueIds(...args: any[]): void;

            function rankedQueueIds(...args: any[]): void;

            function rankedQueueNames(...args: any[]): void;

            function seasonIds(...args: any[]): void;

        }

        namespace MasteryUtil {
            const prototype: {
            };

            function getKeystonesByTree(...args: any[]): void;

        }

        namespace MatchUtil {
            const prototype: {
            };

            function getParticipantIdentityByAccountAndPlatformId(...args: any[]): void;

            function getParticipantIdentityByAccountId(...args: any[]): void;

            function getParticipantsByChampion(...args: any[]): void;

            function getPatchFromGameVersion(...args: any[]): void;

            function getVersionForGameVersion(...args: any[]): void;

            function sortVersionsDescending(...args: any[]): void;

        }

        namespace ParameterUtil {
            const prototype: {
            };

            function extractPlatformIdAndOptions(...args: any[]): void;

        }

        namespace RegionAndPlatformUtil {
            const prototype: {
            };

            function getMappingRegionToPlatformId(...args: any[]): void;

            function getPlatformIdForRegion(...args: any[]): void;

            function getPlatformIdFromPlatformIdOrRegion(...args: any[]): void;

            function getPlatformIds(...args: any[]): void;

            function getRegionForPlatformId(...args: any[]): void;

            function getRegions(...args: any[]): void;

            function validatePlatformId(...args: any[]): void;

            function validateRegion(...args: any[]): void;

        }

        namespace SummonerUtil {
            const prototype: {
            };

            function normalizeSummonerName(...args: any[]): void;

            function validateSummonerNameInputCharacters(...args: any[]): void;

            function validateSummonerNameInputLength(...args: any[]): void;

        }

    }

}

